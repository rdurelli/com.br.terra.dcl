/*
* generated by Xtext
*/
package com.br.terra.dcl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchiteturalElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModDeclModDeclParserRuleCall_2_0 = (RuleCall)cModDeclAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRestrictionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDCDeclAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDCDeclDCDeclParserRuleCall_6_0 = (RuleCall)cDCDeclAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Model:
		//	"architeturalElements" "{" modDecl+=ModDecl* "}" "restrictions" "{" dCDecl+=DCDecl* "}";
		public ParserRule getRule() { return rule; }

		//"architeturalElements" "{" modDecl+=ModDecl* "}" "restrictions" "{" dCDecl+=DCDecl* "}"
		public Group getGroup() { return cGroup; }

		//"architeturalElements"
		public Keyword getArchiteturalElementsKeyword_0() { return cArchiteturalElementsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//modDecl+=ModDecl*
		public Assignment getModDeclAssignment_2() { return cModDeclAssignment_2; }

		//ModDecl
		public RuleCall getModDeclModDeclParserRuleCall_2_0() { return cModDeclModDeclParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"restrictions"
		public Keyword getRestrictionsKeyword_4() { return cRestrictionsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//dCDecl+=DCDecl*
		public Assignment getDCDeclAssignment_6() { return cDCDeclAssignment_6; }

		//DCDecl
		public RuleCall getDCDeclDCDeclParserRuleCall_6_0() { return cDCDeclDCDeclParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ModDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLayerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cComponentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSubSystemKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cArchitectureViewKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSoftwareSystemKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ModDecl:
		//	"layer" name=ID ";" | "component" name=ID ";" | "subSystem" name=ID ";" | "architectureView" name=ID ";" |
		//	"softwareSystem" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"layer" name=ID ";" | "component" name=ID ";" | "subSystem" name=ID ";" | "architectureView" name=ID ";" |
		//"softwareSystem" name=ID ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"layer" name=ID ";"
		public Group getGroup_0() { return cGroup_0; }

		//"layer"
		public Keyword getLayerKeyword_0_0() { return cLayerKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//"component" name=ID ";"
		public Group getGroup_1() { return cGroup_1; }

		//"component"
		public Keyword getComponentKeyword_1_0() { return cComponentKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }

		//"subSystem" name=ID ";"
		public Group getGroup_2() { return cGroup_2; }

		//"subSystem"
		public Keyword getSubSystemKeyword_2_0() { return cSubSystemKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//"architectureView" name=ID ";"
		public Group getGroup_3() { return cGroup_3; }

		//"architectureView"
		public Keyword getArchitectureViewKeyword_3_0() { return cArchitectureViewKeyword_3_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"softwareSystem" name=ID ";"
		public Group getGroup_4() { return cGroup_4; }

		//"softwareSystem"
		public Keyword getSoftwareSystemKeyword_4_0() { return cSoftwareSystemKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}

	public class DCDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOnlyKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTModDeclCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTModDeclIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTModDeclCrossReference_0_1_0.eContents().get(1);
		private final Keyword cCanKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElementTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_3_0 = (RuleCall)cElementTypeAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cTypeModDeclCrossReference_0_4_0 = (CrossReference)cTypeAssignment_0_4.eContents().get(0);
		private final RuleCall cTypeModDeclIDTerminalRuleCall_0_4_0_1 = (RuleCall)cTypeModDeclCrossReference_0_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTModDeclCrossReference_1_0_0 = (CrossReference)cTAssignment_1_0.eContents().get(0);
		private final RuleCall cTModDeclIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTModDeclCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCannotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_2_0 = (RuleCall)cElementTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeModDeclCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeModDeclIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeModDeclCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cTModDeclCrossReference_2_0_0 = (CrossReference)cTAssignment_2_0.eContents().get(0);
		private final RuleCall cTModDeclIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTModDeclCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cElementTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_2_0 = (RuleCall)cElementTypeAssignment_2_2.eContents().get(0);
		private final Keyword cOnlyKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cTypeModDeclCrossReference_2_4_0 = (CrossReference)cTypeAssignment_2_4.eContents().get(0);
		private final RuleCall cTypeModDeclIDTerminalRuleCall_2_4_0_1 = (RuleCall)cTypeModDeclCrossReference_2_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cTModDeclCrossReference_3_0_0 = (CrossReference)cTAssignment_3_0.eContents().get(0);
		private final RuleCall cTModDeclIDTerminalRuleCall_3_0_0_1 = (RuleCall)cTModDeclCrossReference_3_0_0.eContents().get(1);
		private final Keyword cMustKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEntityTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEntityTypeEntityTypeParserRuleCall_3_2_0 = (RuleCall)cEntityTypeAssignment_3_2.eContents().get(0);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cTypeModDeclCrossReference_3_3_0 = (CrossReference)cTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cTypeModDeclIDTerminalRuleCall_3_3_0_1 = (RuleCall)cTypeModDeclCrossReference_3_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//DCDecl:
		//	"Only" t=[ModDecl] "can-" elementType=ElementType type=[ModDecl] ";" | t=[ModDecl] "cannot-" elementType=ElementType
		//	type=[ModDecl] ";" | t=[ModDecl] "can-" elementType=ElementType "-only" type=[ModDecl] ";" | t=[ModDecl] "must-"
		//	entityType=EntityType type=[ModDecl] ";";
		public ParserRule getRule() { return rule; }

		//"Only" t=[ModDecl] "can-" elementType=ElementType type=[ModDecl] ";" | t=[ModDecl] "cannot-" elementType=ElementType
		//type=[ModDecl] ";" | t=[ModDecl] "can-" elementType=ElementType "-only" type=[ModDecl] ";" | t=[ModDecl] "must-"
		//entityType=EntityType type=[ModDecl] ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Only" t=[ModDecl] "can-" elementType=ElementType type=[ModDecl] ";"
		public Group getGroup_0() { return cGroup_0; }

		//"Only"
		public Keyword getOnlyKeyword_0_0() { return cOnlyKeyword_0_0; }

		//t=[ModDecl]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }

		//[ModDecl]
		public CrossReference getTModDeclCrossReference_0_1_0() { return cTModDeclCrossReference_0_1_0; }

		//ID
		public RuleCall getTModDeclIDTerminalRuleCall_0_1_0_1() { return cTModDeclIDTerminalRuleCall_0_1_0_1; }

		//"can-"
		public Keyword getCanKeyword_0_2() { return cCanKeyword_0_2; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_3() { return cElementTypeAssignment_0_3; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_3_0() { return cElementTypeElementTypeParserRuleCall_0_3_0; }

		//type=[ModDecl]
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//[ModDecl]
		public CrossReference getTypeModDeclCrossReference_0_4_0() { return cTypeModDeclCrossReference_0_4_0; }

		//ID
		public RuleCall getTypeModDeclIDTerminalRuleCall_0_4_0_1() { return cTypeModDeclIDTerminalRuleCall_0_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//t=[ModDecl] "cannot-" elementType=ElementType type=[ModDecl] ";"
		public Group getGroup_1() { return cGroup_1; }

		//t=[ModDecl]
		public Assignment getTAssignment_1_0() { return cTAssignment_1_0; }

		//[ModDecl]
		public CrossReference getTModDeclCrossReference_1_0_0() { return cTModDeclCrossReference_1_0_0; }

		//ID
		public RuleCall getTModDeclIDTerminalRuleCall_1_0_0_1() { return cTModDeclIDTerminalRuleCall_1_0_0_1; }

		//"cannot-"
		public Keyword getCannotKeyword_1_1() { return cCannotKeyword_1_1; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_2() { return cElementTypeAssignment_1_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_2_0() { return cElementTypeElementTypeParserRuleCall_1_2_0; }

		//type=[ModDecl]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//[ModDecl]
		public CrossReference getTypeModDeclCrossReference_1_3_0() { return cTypeModDeclCrossReference_1_3_0; }

		//ID
		public RuleCall getTypeModDeclIDTerminalRuleCall_1_3_0_1() { return cTypeModDeclIDTerminalRuleCall_1_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }

		//t=[ModDecl] "can-" elementType=ElementType "-only" type=[ModDecl] ";"
		public Group getGroup_2() { return cGroup_2; }

		//t=[ModDecl]
		public Assignment getTAssignment_2_0() { return cTAssignment_2_0; }

		//[ModDecl]
		public CrossReference getTModDeclCrossReference_2_0_0() { return cTModDeclCrossReference_2_0_0; }

		//ID
		public RuleCall getTModDeclIDTerminalRuleCall_2_0_0_1() { return cTModDeclIDTerminalRuleCall_2_0_0_1; }

		//"can-"
		public Keyword getCanKeyword_2_1() { return cCanKeyword_2_1; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_2_2() { return cElementTypeAssignment_2_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_2_0() { return cElementTypeElementTypeParserRuleCall_2_2_0; }

		//"-only"
		public Keyword getOnlyKeyword_2_3() { return cOnlyKeyword_2_3; }

		//type=[ModDecl]
		public Assignment getTypeAssignment_2_4() { return cTypeAssignment_2_4; }

		//[ModDecl]
		public CrossReference getTypeModDeclCrossReference_2_4_0() { return cTypeModDeclCrossReference_2_4_0; }

		//ID
		public RuleCall getTypeModDeclIDTerminalRuleCall_2_4_0_1() { return cTypeModDeclIDTerminalRuleCall_2_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//t=[ModDecl] "must-" entityType=EntityType type=[ModDecl] ";"
		public Group getGroup_3() { return cGroup_3; }

		//t=[ModDecl]
		public Assignment getTAssignment_3_0() { return cTAssignment_3_0; }

		//[ModDecl]
		public CrossReference getTModDeclCrossReference_3_0_0() { return cTModDeclCrossReference_3_0_0; }

		//ID
		public RuleCall getTModDeclIDTerminalRuleCall_3_0_0_1() { return cTModDeclIDTerminalRuleCall_3_0_0_1; }

		//"must-"
		public Keyword getMustKeyword_3_1() { return cMustKeyword_3_1; }

		//entityType=EntityType
		public Assignment getEntityTypeAssignment_3_2() { return cEntityTypeAssignment_3_2; }

		//EntityType
		public RuleCall getEntityTypeEntityTypeParserRuleCall_3_2_0() { return cEntityTypeEntityTypeParserRuleCall_3_2_0; }

		//type=[ModDecl]
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }

		//[ModDecl]
		public CrossReference getTypeModDeclCrossReference_3_3_0() { return cTypeModDeclCrossReference_3_3_0; }

		//ID
		public RuleCall getTypeModDeclIDTerminalRuleCall_3_3_0_1() { return cTypeModDeclIDTerminalRuleCall_3_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
	}

	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementType:
		//	BasicType | EntityType;
		public ParserRule getRule() { return rule; }

		//BasicType | EntityType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_1() { return cEntityTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameAccessKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameDeclareKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameHandleKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameCreateKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameDependKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		
		//BasicType:
		//	typeName=("access" | "declare" | "handle" | "create" | "depend");
		public ParserRule getRule() { return rule; }

		//typeName=("access" | "declare" | "handle" | "create" | "depend")
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }

		//"access" | "declare" | "handle" | "create" | "depend"
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }

		//"access"
		public Keyword getTypeNameAccessKeyword_0_0() { return cTypeNameAccessKeyword_0_0; }

		//"declare"
		public Keyword getTypeNameDeclareKeyword_0_1() { return cTypeNameDeclareKeyword_0_1; }

		//"handle"
		public Keyword getTypeNameHandleKeyword_0_2() { return cTypeNameHandleKeyword_0_2; }

		//"create"
		public Keyword getTypeNameCreateKeyword_0_3() { return cTypeNameCreateKeyword_0_3; }

		//"depend"
		public Keyword getTypeNameDependKeyword_0_4() { return cTypeNameDependKeyword_0_4; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cEntityAlternatives_0 = (Alternatives)cEntityAssignment.eContents().get(0);
		private final Keyword cEntityExtendKeyword_0_0 = (Keyword)cEntityAlternatives_0.eContents().get(0);
		private final Keyword cEntityImplementKeyword_0_1 = (Keyword)cEntityAlternatives_0.eContents().get(1);
		private final Keyword cEntityDeriveKeyword_0_2 = (Keyword)cEntityAlternatives_0.eContents().get(2);
		private final Keyword cEntityThrowKeyword_0_3 = (Keyword)cEntityAlternatives_0.eContents().get(3);
		private final Keyword cEntityAnnotatedKeyword_0_4 = (Keyword)cEntityAlternatives_0.eContents().get(4);
		
		//EntityType:
		//	entity=("extend" | "implement" | "derive" | "throw" | "annotated");
		public ParserRule getRule() { return rule; }

		//entity=("extend" | "implement" | "derive" | "throw" | "annotated")
		public Assignment getEntityAssignment() { return cEntityAssignment; }

		//"extend" | "implement" | "derive" | "throw" | "annotated"
		public Alternatives getEntityAlternatives_0() { return cEntityAlternatives_0; }

		//"extend"
		public Keyword getEntityExtendKeyword_0_0() { return cEntityExtendKeyword_0_0; }

		//"implement"
		public Keyword getEntityImplementKeyword_0_1() { return cEntityImplementKeyword_0_1; }

		//"derive"
		public Keyword getEntityDeriveKeyword_0_2() { return cEntityDeriveKeyword_0_2; }

		//"throw"
		public Keyword getEntityThrowKeyword_0_3() { return cEntityThrowKeyword_0_3; }

		//"annotated"
		public Keyword getEntityAnnotatedKeyword_0_4() { return cEntityAnnotatedKeyword_0_4; }
	}
	
	
	private final ModelElements pModel;
	private final ModDeclElements pModDecl;
	private final DCDeclElements pDCDecl;
	private final ElementTypeElements pElementType;
	private final BasicTypeElements pBasicType;
	private final EntityTypeElements pEntityType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModDecl = new ModDeclElements();
		this.pDCDecl = new DCDeclElements();
		this.pElementType = new ElementTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pEntityType = new EntityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.br.terra.dcl.DCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"architeturalElements" "{" modDecl+=ModDecl* "}" "restrictions" "{" dCDecl+=DCDecl* "}";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ModDecl:
	//	"layer" name=ID ";" | "component" name=ID ";" | "subSystem" name=ID ";" | "architectureView" name=ID ";" |
	//	"softwareSystem" name=ID ";";
	public ModDeclElements getModDeclAccess() {
		return pModDecl;
	}
	
	public ParserRule getModDeclRule() {
		return getModDeclAccess().getRule();
	}

	//DCDecl:
	//	"Only" t=[ModDecl] "can-" elementType=ElementType type=[ModDecl] ";" | t=[ModDecl] "cannot-" elementType=ElementType
	//	type=[ModDecl] ";" | t=[ModDecl] "can-" elementType=ElementType "-only" type=[ModDecl] ";" | t=[ModDecl] "must-"
	//	entityType=EntityType type=[ModDecl] ";";
	public DCDeclElements getDCDeclAccess() {
		return pDCDecl;
	}
	
	public ParserRule getDCDeclRule() {
		return getDCDeclAccess().getRule();
	}

	//ElementType:
	//	BasicType | EntityType;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}

	//BasicType:
	//	typeName=("access" | "declare" | "handle" | "create" | "depend");
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//EntityType:
	//	entity=("extend" | "implement" | "derive" | "throw" | "annotated");
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
