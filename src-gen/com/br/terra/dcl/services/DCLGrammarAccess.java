/*
* generated by Xtext
*/
package com.br.terra.dcl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchiteturalElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructureElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructureElementsDCLStructureElementParserRuleCall_2_0 = (RuleCall)cStructureElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRestrictionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDCDeclAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDCDeclDCDeclParserRuleCall_6_0 = (RuleCall)cDCDeclAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Model:
		//	"architeturalElements" "{" structureElements+=DCLStructureElement+ "}" "restrictions" "{" dCDecl+=DCDecl* "}";
		public ParserRule getRule() { return rule; }

		//"architeturalElements" "{" structureElements+=DCLStructureElement+ "}" "restrictions" "{" dCDecl+=DCDecl* "}"
		public Group getGroup() { return cGroup; }

		//"architeturalElements"
		public Keyword getArchiteturalElementsKeyword_0() { return cArchiteturalElementsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//structureElements+=DCLStructureElement+
		public Assignment getStructureElementsAssignment_2() { return cStructureElementsAssignment_2; }

		//DCLStructureElement
		public RuleCall getStructureElementsDCLStructureElementParserRuleCall_2_0() { return cStructureElementsDCLStructureElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"restrictions"
		public Keyword getRestrictionsKeyword_4() { return cRestrictionsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//dCDecl+=DCDecl*
		public Assignment getDCDeclAssignment_6() { return cDCDeclAssignment_6; }

		//DCDecl
		public RuleCall getDCDeclDCDeclParserRuleCall_6_0() { return cDCDeclDCDeclParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DCLStructureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLStructureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDCLLayerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDCLComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDCLSubSystemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDCLArchitectureViewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDCLSoftwareSystemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DCLStructureElement:
		//	DCLLayer | DCLComponent | DCLSubSystem | DCLArchitectureView | DCLSoftwareSystem;
		public ParserRule getRule() { return rule; }

		//DCLLayer | DCLComponent | DCLSubSystem | DCLArchitectureView | DCLSoftwareSystem
		public Alternatives getAlternatives() { return cAlternatives; }

		//DCLLayer
		public RuleCall getDCLLayerParserRuleCall_0() { return cDCLLayerParserRuleCall_0; }

		//DCLComponent
		public RuleCall getDCLComponentParserRuleCall_1() { return cDCLComponentParserRuleCall_1; }

		//DCLSubSystem
		public RuleCall getDCLSubSystemParserRuleCall_2() { return cDCLSubSystemParserRuleCall_2; }

		//DCLArchitectureView
		public RuleCall getDCLArchitectureViewParserRuleCall_3() { return cDCLArchitectureViewParserRuleCall_3; }

		//DCLSoftwareSystem
		public RuleCall getDCLSoftwareSystemParserRuleCall_4() { return cDCLSoftwareSystemParserRuleCall_4; }
	}

	public class DCLLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLLayer:
		//	"layer" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"layer" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"layer"
		public Keyword getLayerKeyword_0() { return cLayerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCLComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLComponent:
		//	"component" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"component" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCLSubSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLSubSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLSubSystem:
		//	"subSystem" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"subSystem" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"subSystem"
		public Keyword getSubSystemKeyword_0() { return cSubSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCLArchitectureViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLArchitectureView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLArchitectureView:
		//	"architectureView" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"architectureView" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"architectureView"
		public Keyword getArchitectureViewKeyword_0() { return cArchitectureViewKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCLSoftwareSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCLSoftwareSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoftwareSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLSoftwareSystem:
		//	"softwareSystem" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"softwareSystem" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"softwareSystem"
		public Keyword getSoftwareSystemKeyword_0() { return cSoftwareSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DCDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOnlyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOnlyOnlyParserRuleCall_0_0_0 = (RuleCall)cOnlyAssignment_0_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDCLStructureElementCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDCLStructureElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cCanAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCanCanParserRuleCall_0_2_0 = (RuleCall)cCanAssignment_0_2.eContents().get(0);
		private final Assignment cElementTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_3_0 = (RuleCall)cElementTypeAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cTypeDCLStructureElementCrossReference_0_4_0 = (CrossReference)cTypeAssignment_0_4.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_0_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_1_0_0 = (CrossReference)cTAssignment_1_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_1_0_0.eContents().get(1);
		private final Assignment cCannotAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCannotCannotParserRuleCall_1_1_0 = (RuleCall)cCannotAssignment_1_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_2_0 = (RuleCall)cElementTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDCLStructureElementCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_2_0_0 = (CrossReference)cTAssignment_2_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_2_0_0.eContents().get(1);
		private final Assignment cCanAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCanCanParserRuleCall_2_1_0 = (RuleCall)cCanAssignment_2_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_2_0 = (RuleCall)cElementTypeAssignment_2_2.eContents().get(0);
		private final Assignment cOnly2Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOnly2Only2ParserRuleCall_2_3_0 = (RuleCall)cOnly2Assignment_2_3.eContents().get(0);
		private final Assignment cTypeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cTypeDCLStructureElementCrossReference_2_4_0 = (CrossReference)cTypeAssignment_2_4.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_2_4_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_2_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_3_0_0 = (CrossReference)cTAssignment_3_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_3_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_3_0_0.eContents().get(1);
		private final Assignment cMustAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMustMustParserRuleCall_3_1_0 = (RuleCall)cMustAssignment_3_1.eContents().get(0);
		private final Assignment cEntityTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEntityTypeEntityTypeParserRuleCall_3_2_0 = (RuleCall)cEntityTypeAssignment_3_2.eContents().get(0);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cTypeDCLStructureElementCrossReference_3_3_0 = (CrossReference)cTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_3_3_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_3_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//DCDecl:
		//	only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ";" |
		//	t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ";" | t=[DCLStructureElement]
		//	can=Can elementType=ElementType only2=Only2 type=[DCLStructureElement] ";" | t=[DCLStructureElement] must=Must
		//	entityType=EntityType type=[DCLStructureElement] ";";
		public ParserRule getRule() { return rule; }

		//only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ";" |
		//t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ";" | t=[DCLStructureElement]
		//can=Can elementType=ElementType only2=Only2 type=[DCLStructureElement] ";" | t=[DCLStructureElement] must=Must
		//entityType=EntityType type=[DCLStructureElement] ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ";"
		public Group getGroup_0() { return cGroup_0; }

		//only=Only
		public Assignment getOnlyAssignment_0_0() { return cOnlyAssignment_0_0; }

		//Only
		public RuleCall getOnlyOnlyParserRuleCall_0_0_0() { return cOnlyOnlyParserRuleCall_0_0_0; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_0_1_0() { return cTDCLStructureElementCrossReference_0_1_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_0_1_0_1() { return cTDCLStructureElementIDTerminalRuleCall_0_1_0_1; }

		//can=Can
		public Assignment getCanAssignment_0_2() { return cCanAssignment_0_2; }

		//Can
		public RuleCall getCanCanParserRuleCall_0_2_0() { return cCanCanParserRuleCall_0_2_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_3() { return cElementTypeAssignment_0_3; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_3_0() { return cElementTypeElementTypeParserRuleCall_0_3_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_0_4_0() { return cTypeDCLStructureElementCrossReference_0_4_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ";"
		public Group getGroup_1() { return cGroup_1; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_1_0() { return cTAssignment_1_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_1_0_0() { return cTDCLStructureElementCrossReference_1_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_1_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_1_0_0_1; }

		//cannot=Cannot
		public Assignment getCannotAssignment_1_1() { return cCannotAssignment_1_1; }

		//Cannot
		public RuleCall getCannotCannotParserRuleCall_1_1_0() { return cCannotCannotParserRuleCall_1_1_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_2() { return cElementTypeAssignment_1_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_2_0() { return cElementTypeElementTypeParserRuleCall_1_2_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_1_3_0() { return cTypeDCLStructureElementCrossReference_1_3_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }

		//t=[DCLStructureElement] can=Can elementType=ElementType only2=Only2 type=[DCLStructureElement] ";"
		public Group getGroup_2() { return cGroup_2; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_2_0() { return cTAssignment_2_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_2_0_0() { return cTDCLStructureElementCrossReference_2_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_2_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_2_0_0_1; }

		//can=Can
		public Assignment getCanAssignment_2_1() { return cCanAssignment_2_1; }

		//Can
		public RuleCall getCanCanParserRuleCall_2_1_0() { return cCanCanParserRuleCall_2_1_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_2_2() { return cElementTypeAssignment_2_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_2_0() { return cElementTypeElementTypeParserRuleCall_2_2_0; }

		//only2=Only2
		public Assignment getOnly2Assignment_2_3() { return cOnly2Assignment_2_3; }

		//Only2
		public RuleCall getOnly2Only2ParserRuleCall_2_3_0() { return cOnly2Only2ParserRuleCall_2_3_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_2_4() { return cTypeAssignment_2_4; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_2_4_0() { return cTypeDCLStructureElementCrossReference_2_4_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_2_4_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_2_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//t=[DCLStructureElement] must=Must entityType=EntityType type=[DCLStructureElement] ";"
		public Group getGroup_3() { return cGroup_3; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_3_0() { return cTAssignment_3_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_3_0_0() { return cTDCLStructureElementCrossReference_3_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_3_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_3_0_0_1; }

		//must=Must
		public Assignment getMustAssignment_3_1() { return cMustAssignment_3_1; }

		//Must
		public RuleCall getMustMustParserRuleCall_3_1_0() { return cMustMustParserRuleCall_3_1_0; }

		//entityType=EntityType
		public Assignment getEntityTypeAssignment_3_2() { return cEntityTypeAssignment_3_2; }

		//EntityType
		public RuleCall getEntityTypeEntityTypeParserRuleCall_3_2_0() { return cEntityTypeEntityTypeParserRuleCall_3_2_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_3_3_0() { return cTypeDCLStructureElementCrossReference_3_3_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_3_3_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_3_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
	}

	public class OnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Only");
		private final Assignment cOnlyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnlyOnlyKeyword_0 = (Keyword)cOnlyAssignment.eContents().get(0);
		
		//Only:
		//	only="only";
		public ParserRule getRule() { return rule; }

		//only="only"
		public Assignment getOnlyAssignment() { return cOnlyAssignment; }

		//"only"
		public Keyword getOnlyOnlyKeyword_0() { return cOnlyOnlyKeyword_0; }
	}

	public class CanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Can");
		private final Assignment cCanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCanCanKeyword_0 = (Keyword)cCanAssignment.eContents().get(0);
		
		//Can:
		//	can="can-";
		public ParserRule getRule() { return rule; }

		//can="can-"
		public Assignment getCanAssignment() { return cCanAssignment; }

		//"can-"
		public Keyword getCanCanKeyword_0() { return cCanCanKeyword_0; }
	}

	public class CannotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cannot");
		private final Assignment cCannotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCannotCannotKeyword_0 = (Keyword)cCannotAssignment.eContents().get(0);
		
		//Cannot:
		//	cannot="cannot-";
		public ParserRule getRule() { return rule; }

		//cannot="cannot-"
		public Assignment getCannotAssignment() { return cCannotAssignment; }

		//"cannot-"
		public Keyword getCannotCannotKeyword_0() { return cCannotCannotKeyword_0; }
	}

	public class Only2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Only2");
		private final Assignment cOnly2Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnly2OnlyKeyword_0 = (Keyword)cOnly2Assignment.eContents().get(0);
		
		//Only2:
		//	only2="-only";
		public ParserRule getRule() { return rule; }

		//only2="-only"
		public Assignment getOnly2Assignment() { return cOnly2Assignment; }

		//"-only"
		public Keyword getOnly2OnlyKeyword_0() { return cOnly2OnlyKeyword_0; }
	}

	public class MustElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Must");
		private final Assignment cMustAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMustMustKeyword_0 = (Keyword)cMustAssignment.eContents().get(0);
		
		//Must:
		//	must="must-";
		public ParserRule getRule() { return rule; }

		//must="must-"
		public Assignment getMustAssignment() { return cMustAssignment; }

		//"must-"
		public Keyword getMustMustKeyword_0() { return cMustMustKeyword_0; }
	}

	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementType:
		//	BasicType | EntityType;
		public ParserRule getRule() { return rule; }

		//BasicType | EntityType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_1() { return cEntityTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameAccessKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameDeclareKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameHandleKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameCreateKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameDependKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		
		//BasicType:
		//	typeName=("access" | "declare" | "handle" | "create" | "depend");
		public ParserRule getRule() { return rule; }

		//typeName=("access" | "declare" | "handle" | "create" | "depend")
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }

		//"access" | "declare" | "handle" | "create" | "depend"
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }

		//"access"
		public Keyword getTypeNameAccessKeyword_0_0() { return cTypeNameAccessKeyword_0_0; }

		//"declare"
		public Keyword getTypeNameDeclareKeyword_0_1() { return cTypeNameDeclareKeyword_0_1; }

		//"handle"
		public Keyword getTypeNameHandleKeyword_0_2() { return cTypeNameHandleKeyword_0_2; }

		//"create"
		public Keyword getTypeNameCreateKeyword_0_3() { return cTypeNameCreateKeyword_0_3; }

		//"depend"
		public Keyword getTypeNameDependKeyword_0_4() { return cTypeNameDependKeyword_0_4; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cEntityAlternatives_0 = (Alternatives)cEntityAssignment.eContents().get(0);
		private final Keyword cEntityExtendKeyword_0_0 = (Keyword)cEntityAlternatives_0.eContents().get(0);
		private final Keyword cEntityImplementKeyword_0_1 = (Keyword)cEntityAlternatives_0.eContents().get(1);
		private final Keyword cEntityDeriveKeyword_0_2 = (Keyword)cEntityAlternatives_0.eContents().get(2);
		private final Keyword cEntityThrowKeyword_0_3 = (Keyword)cEntityAlternatives_0.eContents().get(3);
		private final Keyword cEntityAnnotatedKeyword_0_4 = (Keyword)cEntityAlternatives_0.eContents().get(4);
		
		//EntityType:
		//	entity=("extend" | "implement" | "derive" | "throw" | "annotated");
		public ParserRule getRule() { return rule; }

		//entity=("extend" | "implement" | "derive" | "throw" | "annotated")
		public Assignment getEntityAssignment() { return cEntityAssignment; }

		//"extend" | "implement" | "derive" | "throw" | "annotated"
		public Alternatives getEntityAlternatives_0() { return cEntityAlternatives_0; }

		//"extend"
		public Keyword getEntityExtendKeyword_0_0() { return cEntityExtendKeyword_0_0; }

		//"implement"
		public Keyword getEntityImplementKeyword_0_1() { return cEntityImplementKeyword_0_1; }

		//"derive"
		public Keyword getEntityDeriveKeyword_0_2() { return cEntityDeriveKeyword_0_2; }

		//"throw"
		public Keyword getEntityThrowKeyword_0_3() { return cEntityThrowKeyword_0_3; }

		//"annotated"
		public Keyword getEntityAnnotatedKeyword_0_4() { return cEntityAnnotatedKeyword_0_4; }
	}
	
	
	private final ModelElements pModel;
	private final DCLStructureElementElements pDCLStructureElement;
	private final DCLLayerElements pDCLLayer;
	private final DCLComponentElements pDCLComponent;
	private final DCLSubSystemElements pDCLSubSystem;
	private final DCLArchitectureViewElements pDCLArchitectureView;
	private final DCLSoftwareSystemElements pDCLSoftwareSystem;
	private final DCDeclElements pDCDecl;
	private final OnlyElements pOnly;
	private final CanElements pCan;
	private final CannotElements pCannot;
	private final Only2Elements pOnly2;
	private final MustElements pMust;
	private final ElementTypeElements pElementType;
	private final BasicTypeElements pBasicType;
	private final EntityTypeElements pEntityType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDCLStructureElement = new DCLStructureElementElements();
		this.pDCLLayer = new DCLLayerElements();
		this.pDCLComponent = new DCLComponentElements();
		this.pDCLSubSystem = new DCLSubSystemElements();
		this.pDCLArchitectureView = new DCLArchitectureViewElements();
		this.pDCLSoftwareSystem = new DCLSoftwareSystemElements();
		this.pDCDecl = new DCDeclElements();
		this.pOnly = new OnlyElements();
		this.pCan = new CanElements();
		this.pCannot = new CannotElements();
		this.pOnly2 = new Only2Elements();
		this.pMust = new MustElements();
		this.pElementType = new ElementTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pEntityType = new EntityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.br.terra.dcl.DCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"architeturalElements" "{" structureElements+=DCLStructureElement+ "}" "restrictions" "{" dCDecl+=DCDecl* "}";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DCLStructureElement:
	//	DCLLayer | DCLComponent | DCLSubSystem | DCLArchitectureView | DCLSoftwareSystem;
	public DCLStructureElementElements getDCLStructureElementAccess() {
		return pDCLStructureElement;
	}
	
	public ParserRule getDCLStructureElementRule() {
		return getDCLStructureElementAccess().getRule();
	}

	//DCLLayer:
	//	"layer" name=ID ";";
	public DCLLayerElements getDCLLayerAccess() {
		return pDCLLayer;
	}
	
	public ParserRule getDCLLayerRule() {
		return getDCLLayerAccess().getRule();
	}

	//DCLComponent:
	//	"component" name=ID ";";
	public DCLComponentElements getDCLComponentAccess() {
		return pDCLComponent;
	}
	
	public ParserRule getDCLComponentRule() {
		return getDCLComponentAccess().getRule();
	}

	//DCLSubSystem:
	//	"subSystem" name=ID ";";
	public DCLSubSystemElements getDCLSubSystemAccess() {
		return pDCLSubSystem;
	}
	
	public ParserRule getDCLSubSystemRule() {
		return getDCLSubSystemAccess().getRule();
	}

	//DCLArchitectureView:
	//	"architectureView" name=ID ";";
	public DCLArchitectureViewElements getDCLArchitectureViewAccess() {
		return pDCLArchitectureView;
	}
	
	public ParserRule getDCLArchitectureViewRule() {
		return getDCLArchitectureViewAccess().getRule();
	}

	//DCLSoftwareSystem:
	//	"softwareSystem" name=ID ";";
	public DCLSoftwareSystemElements getDCLSoftwareSystemAccess() {
		return pDCLSoftwareSystem;
	}
	
	public ParserRule getDCLSoftwareSystemRule() {
		return getDCLSoftwareSystemAccess().getRule();
	}

	//DCDecl:
	//	only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ";" |
	//	t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ";" | t=[DCLStructureElement]
	//	can=Can elementType=ElementType only2=Only2 type=[DCLStructureElement] ";" | t=[DCLStructureElement] must=Must
	//	entityType=EntityType type=[DCLStructureElement] ";";
	public DCDeclElements getDCDeclAccess() {
		return pDCDecl;
	}
	
	public ParserRule getDCDeclRule() {
		return getDCDeclAccess().getRule();
	}

	//Only:
	//	only="only";
	public OnlyElements getOnlyAccess() {
		return pOnly;
	}
	
	public ParserRule getOnlyRule() {
		return getOnlyAccess().getRule();
	}

	//Can:
	//	can="can-";
	public CanElements getCanAccess() {
		return pCan;
	}
	
	public ParserRule getCanRule() {
		return getCanAccess().getRule();
	}

	//Cannot:
	//	cannot="cannot-";
	public CannotElements getCannotAccess() {
		return pCannot;
	}
	
	public ParserRule getCannotRule() {
		return getCannotAccess().getRule();
	}

	//Only2:
	//	only2="-only";
	public Only2Elements getOnly2Access() {
		return pOnly2;
	}
	
	public ParserRule getOnly2Rule() {
		return getOnly2Access().getRule();
	}

	//Must:
	//	must="must-";
	public MustElements getMustAccess() {
		return pMust;
	}
	
	public ParserRule getMustRule() {
		return getMustAccess().getRule();
	}

	//ElementType:
	//	BasicType | EntityType;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}

	//BasicType:
	//	typeName=("access" | "declare" | "handle" | "create" | "depend");
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//EntityType:
	//	entity=("extend" | "implement" | "derive" | "throw" | "annotated");
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
